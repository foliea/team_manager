@model TeamManager.Models.PlayerModel
@{
    ViewBag.Title = "Create";
}
<h2>Create</h2>
@using (Html.BeginForm("Create", "Player", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>PlayerModel</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TeamId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TeamId)
            @Html.ValidationMessageFor(model => model.TeamId)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Avatar)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AvatarImage, new { type = "file", accept = "image/*" })
            @Html.ValidationMessageFor(model => model.AvatarImage)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Win)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Win)
            @Html.ValidationMessageFor(model => model.Win)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Loss)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Loss)
            @Html.ValidationMessageFor(model => model.Loss)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Tie)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Tie)
            @Html.ValidationMessageFor(model => model.Tie)
        </div>
        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}